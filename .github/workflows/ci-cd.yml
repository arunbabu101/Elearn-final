name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

    steps:
      - uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          python manage.py migrate
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and push Docker image
      - name: Build and Push Docker image
        run: |
          # Build the Docker image with the date tag
    
          docker build -t arunbabu101/edureka:latest .

          # Push the Docker image with the date tag
          docker push arunbabu101/edureka:latest

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@13.60.42.127 << EOF
            # Pull the latest image
            docker pull arunbabu101/edureka:latest

            # Stop the existing container if it exists
            CONTAINER_ID=$(docker ps -q --filter ancestor=arunbabu101/edureka:latest)
            if [ -n "$CONTAINER_ID" ]; then
              docker stop "$CONTAINER_ID"
            fi

            # Run the new container
            docker run -d -p 8000:8000 arunbabu101/edureka:latest
          EOF
